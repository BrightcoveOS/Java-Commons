package com.brightcove.commons.catalog.objects;

import java.util.ArrayList;
import java.util.logging.Logger;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

import com.brightcove.commons.xml.W3CXMLUtils;

/**
 * <p>
 *    This class is basically just an ArrayList with some extra utility
 *    methods that makes working with a List of Videos easier.
 * </p>
 * 
 * @author <a href="https://github.com/three4clavin">three4clavin</a>
 *
 */
public class Videos extends ArrayList<Video> {
	private static final long serialVersionUID = -1603397104852631362L;
	
	private Integer totalCount = 0;
	
	/**
	 *  <p>Default Constructor</p>
	 *  <p>
	 *     Create empty array with total count = 0
	 *  </p>
	 */
	public Videos() {
		super();
		totalCount = 0;
	}
	
	/**
	 * <p>
	 *    Constructs a new list of videos from an XML representation (generated by Videos.toXml()).
	 * </p>
	 * 
	 * @param doc XML Document representing the videos object 
	 */
	public Videos(Document doc) {
		super();
		constructFromDoc(doc, null);
	}
	
	/**
	 * <p>
	 *    Constructs a new list of videos from an XML representation (generated by Videos.toXml()).
	 * </p>
	 * 
	 * @param doc XML Document representing the videos object 
	 * @param logger If not null, verbose logging will be given 
	 */
	public Videos(Document doc, Logger logger) {
		super();
		constructFromDoc(doc, logger);
	}
	
	private void constructFromDoc(Document doc, Logger logger){
		totalCount = 0;
		
		Element rootElement = doc.getDocumentElement();
		Element child       = W3CXMLUtils.getFirstElementChild(rootElement);
		Integer childIdx    = 0;
		while(child != null){
			String nodeName  = child.getNodeName();
			// String nodeValue = W3CXMLUtils.getStringValue(child);
			
			if(Node.ELEMENT_NODE == child.getNodeType()){
				if("Video".equals(nodeName)){
					//if(logger != null){
					//	logger.info("Adding video " + childIdx + ".");
					//}
					
					Video video = new Video(child);
					add(video);
				}
			}
			
			child = W3CXMLUtils.getNextElementSibling(child);
			childIdx++;
		}
		
		if(logger != null){
			logger.info("Document loaded - total videos " + size() + ".");
		}
	}
	
	//public Videos(String xml) throws JSONException {
	//	super();
	//	totalCount = 0;
	//	
	//	JSONObject json     = org.json.XML.toJSONObject(xml);
	//	String[]   rootKeys = JSONObject.getNames(json);
	//	
	//	for(String rootKey : rootKeys){
	//		if("Video".equals(rootKey)){
	//			Video video = new Video(json.getJSONObject(rootKey));
	//			this.add(video);
	//		}
	//	}
	//}
	
	/**
	 * <p>
	 *    Create an array from the JSON response from Brightcove Media API
	 * </p>
	 * 
	 * @param jsonObj JSON response from Brightcove Media API
	 * @throws JSONException If JSON could not be properly parsed
	 */
	public Videos(JSONObject jsonObj) throws JSONException {
		JSONArray jsonItems = jsonObj.getJSONArray("items");
		for(int itemIdx=0;itemIdx<jsonItems.length();itemIdx++){
			// Protect against item being null (Media API can do this for some reason...?)
			if(jsonItems.get(itemIdx) != JSONObject.NULL) {
				JSONObject jsonItem = (JSONObject)jsonItems.get(itemIdx);
				Video video = new Video(jsonItem);
				add(video);
			}
		}
		
		try{
			totalCount = jsonObj.getInt("total_count");
		}
		catch(JSONException jsone){
			// Don't fail altogether
			totalCount = -1;
		}
	}
	
	/**
	 * <p>
	 *    Returns the total count as specified by the Brightcove Media API.
	 * </p>
	 * <p>
	 *    This will only be accurate if the Videos object is created via the
	 *    JSON constructor, and the option to report total count is enabled
	 *    in the call to the Media API.
	 * </p>
	 * 
	 * @return Total count of all videos - note that this may be different than Videos.size() if there are more than 100 videos in the Media API response
	 */
	public Integer getTotalCount(){
		return this.totalCount;
	}
	
	/**
	 * <p>
	 *    Uses the W3C libraries to generate an XML representation of
	 *    this videos object.
	 * </p>
	 * 
	 * @return XML Document representing the videos object 
	 * @throws ParserConfigurationException If there is an error generating the XML
	 */
	public Document toXml() throws ParserConfigurationException {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setNamespaceAware(true);
		
		DocumentBuilder builder = factory.newDocumentBuilder();
		Document doc = builder.newDocument();
		
		Element rootElem = doc.createElement("Videos");
		doc.appendChild(rootElem);
		
		for(Video video : this){
			video.appendXml(rootElem);
		}
		
		// return org.json.XML.toString(jsonVideos);
		return doc;
	}
}
